"""
OVT = Operation Validation Tool, it’s the system to be tested
OF = Operation File
OVT can be provided 1 or 2 OF’s
PTD file = Patient Treatment Definition file (specifies a part of treatment)
An OF contains several fields, such as the Beam Delivered Meterset
A PTD file contains several fields, such as the Beam Specified Meterset
MI is an arbitrary unit to measure a delivered dose

Background:
The SUT is a software called “OVT”, whose purpose is to validate the content of 1 or 2 OF.
The OF are generated by our medical device during a clinical treatment, it gives information on how it went,
how the beam has been delivered.
Our device receives the specifications of the treatment in a file called PTD.
The corresponding PTD is also available by OVT, so it can compare the specification and the actual delivery.
The elements in the OF are structures with several fields and their values, like an XML or a JSON

Requirement:
For each element of each OF provided as input, unless the element is a tuning spot or the delivered
dose is lower than a user configurable value (0.001 MI by default), the OVT shall verify that the
delivered 2D position is equal to the prescribed 2D position, within a user configurable tolerance (2.5
mm by default).
Question:
What are the different elements of this requirement that you need to test?


"""
"""
Scenario 1: Find out how many OF were deivered.
Given: If a OF was delivered.
When: The Value is either 1 or 2.
Then: We check if the OF is a tuning pot or not for each OF value.
"""
def OF_amount_verification():
    of_amount = input("How many OF were delivered? Either 1 or 2 is possible.\n")
    if float(of_amount) == 1:
         initial_OF_check()
    elif float(of_amount) == 2:
        for _ in range(2):
            initial_OF_check()
    elif float(of_amount)>2:
        print("The OF amount was too big \n")
    else:
        print("No OF amount was provided. \n")
"""
Scenario 2: Find out if OF was a tunning pot or not. 
If it was not check what the dose was and whether it is lower than 0.001 MI by default
Given: The OF value is not a tuning pot.
When: The dose is not lower than a user configurable value: (0.001 MI).
Then: The OVT shall run the Verification.
"""
def initial_OF_check():
    of = input("How did the clinical treatment go? \n Is it a tuning spot or a dose value? Choose either option\n")
    if of == "tuning spot".casefold():
        print("The operation file is a tuning spot. \n")
    elif of == "dose".casefold():
        dose = input("What was the dose? Provide a value in MI \n")
        if float(dose) < 0.001:
            print("The dose was too small \n")
        elif float(dose)>=0.001:
            OVT_verification()
    else:
        print("Type tuning spot or dose. \n")
        initial_OF_check()

"""
Scenario 3: Based on the previous test, the OVT shall verify that the
delivered 2D position is equal to the prescribed 2D position, within a user configurable tolerance (2.5
mm by default).
Given: The delivered 2D position. 
And: The prescribed 2D position.
When: The delivered 2D position and the prescribed 2D position are equal and within a user configurable tolerance 
Then: The delivered 2D position is equal to the prescribed 2D position, within a user configurable tolerance (2.5mm by default)
OR When: The delivered 2D position and the prescribed 2D position are not equal and within a user configurable tolerance 
Then: The delivered 2D position is not equal to the prescribed 2D position, within a user configurable tolerance (2.5mm by default)
OR When: The delivered 2D position is not equal to the prescribed 2D position, and not within a user configurable tolerance (2.5mm by default)
Then: The delivered 2D position is not equal to the prescribed 2D position, and not within a user configurable tolerance (2.5mm by default)
OR When: The delivered 2D position is  equal to the prescribed 2D position, and not within a user configurable tolerance (2.5mm by default)
Then: The delivered 2D position is  equal to the prescribed 2D position, and not within a user configurable tolerance (2.5mm by default)
"""
def OVT_verification():
    delivered_2d_position = input("What is the deliviered 2D position? Provide a value in mm\n")
    prescribed2Dposition =  input("What is the prescribed 2D position ? Provide a value in mm\n")
    if float(delivered_2d_position) <= 2.5 and float(delivered_2d_position) == float(prescribed2Dposition):
        print("The delivered 2D position is equal to the prescribed 2D position, within a user configurable tolerance (2.5mm by default)")
    elif float(delivered_2d_position) <= 2.5 and float(delivered_2d_position) != float(prescribed2Dposition):
        print("The delivered 2D position is not equal to the prescribed 2D position, within a user configurable tolerance (2.5mm by default)")
    elif float(delivered_2d_position) > 2.5 and float(delivered_2d_position) != float(prescribed2Dposition):
        print( "The delivered 2D position is not equal to the prescribed 2D position, and not within a user configurable tolerance (2.5mm by default)")
    elif float(delivered_2d_position) > 2.5 and float(delivered_2d_position) == float(prescribed2Dposition):
        print("The delivered 2D position is  equal to the prescribed 2D position, and not within a user configurable tolerance (2.5mm by default)")